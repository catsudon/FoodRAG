version: '3.8'

services:
  app:
    container_name: app
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile

    volumes:
      - ../..:/workspaces:cached
    command: sleep infinity

  postgres:
    container_name: postgres
    image: postgres:latest
    restart: unless-stopped
    # volumes:
    #   - ./postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres

  chroma:
    container_name: chroma
    image: chromadb/chroma
    # volumes:
    #   - ./chroma-data:/chroma/chroma
    command: "--workers 1 --host 0.0.0.0 --port 8000 --proxy-headers --log-config chromadb/log_config.yml --timeout-keep-alive 30"
    environment:
      - IS_PERSISTENT=TRUE
      - CHROMA_SERVER_AUTHN_PROVIDER=${CHROMA_SERVER_AUTHN_PROVIDER}
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=${CHROMA_SERVER_AUTHN_CREDENTIALS_FILE}
      - CHROMA_SERVER_AUTHN_CREDENTIALS=${CHROMA_SERVER_AUTHN_CREDENTIALS}
      - CHROMA_AUTH_TOKEN_TRANSPORT_HEADER=${CHROMA_AUTH_TOKEN_TRANSPORT_HEADER}
      - PERSIST_DIRECTORY=${PERSIST_DIRECTORY:-/chroma/chroma}
      - CHROMA_OTEL_EXPORTER_ENDPOINT=${CHROMA_OTEL_EXPORTER_ENDPOINT}
      - CHROMA_OTEL_EXPORTER_HEADERS=${CHROMA_OTEL_EXPORTER_HEADERS}
      - CHROMA_OTEL_SERVICE_NAME=${CHROMA_OTEL_SERVICE_NAME}
      - CHROMA_OTEL_GRANULARITY=${CHROMA_OTEL_GRANULARITY}
      - CHROMA_SERVER_NOFILE=${CHROMA_SERVER_NOFILE}
    restart: unless-stopped

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    environment:
      - NEO4J_AUTH=neo4j/neo4jpassword
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    # volumes:
    #   - ./neo4j_db/data:/data
    #   - ./neo4j_db/logs:/logs
    #   - ./neo4j_db/import:/var/lib/neo4j/import
    #   - ./neo4j_db/plugins:/plugins

  riva_server:
    container_name: riva_server
    image: nvcr.io/nvidia/riva/riva-speech:2.15.0
    environment:
      - "SERVICE_TYPE=asr,tts"  # Enable both ASR and TTS
      - "ENABLE_NEW_API=true"
    ports:
      - "8888:8888"  # Default API endpoint
      - "8889:8889"  # gRPC endpoint
    volumes:
      - ./models:/data/models  # Mount your model directory
      - ./riva_config:/data/config  # Mount your Riva config directory
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]


networks:
  default:
    external:
      name: foodrag